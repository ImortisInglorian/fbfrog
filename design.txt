How about using existing C preprocessors/parser (e.g. libclang)
+ not really fully investigated yet
+ less work, more complete and less bugs than a custom parser
- dependency on external tool/library makes development/distribution/usage more
  difficult
- fbfrog needs to see #defines, typically pre-existing C-to-AST parsers don't
  preserve them

Storing AST in "API files" in some intermediate format (which is not the final
.bi) to make later translations of the same API easier, by no longer requiring
the original tarballs for which "API files" were once generated.
+ can keep "API files" in VCS, have to download much less tarballs
- such API files are final; they'd need to be regenerated in order to benefit
  from fbfrog fixes or preset changes (e.g. different pre-#defines). Easy to
  have hidden bugs thanks to this, and to be safe, they'd have to be regenerated
  every time, at which point they become pointless.

Re-importing existing FB binding in order to extend/update them
- Old bindings are likely to contain bugs or simply not conform to latest
  API/ABI requirements (e.g., 32bit FB headers use Integer in many places where
  int was used in C, but this would break for 64bit)
- Same as for the issue of "storing AST in some intermediate format": need to
  re-parse the original headers in order for fbfrog/preset updates to take effect
