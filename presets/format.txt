*.fbfrog file format
--------------------

  Similar to C code: // or /**/ for comments, case sensitive keywords,
  "..." string literals, etc., but EOL = statement separator.

Preprocessing (#if block evaluation, macro expansion)
-----------------------------------------------------

  define Identifier
    Register a symbol that's known to be #defined initially, so #ifdef checks
    on it can be evaluated. Useful for compiler pre-#defines such as _WIN32,
    or to get rid of uninteresting #if blocks.

  undef Identifier
    Same thing except that the symbol is known to be *not* #defined initially.
    Common case:
       undef __cplusplus

  noexpand Identifier
    Don't do macro expansion for this symbol

  macro Identifier
  macro Identifier MacroBody
  macro Identifier(MacroParameters) MacroBody
    Declare a #define macro that will be expanded if invoked in the header.
    Same syntax as a #define statement in C/FB. Useful for compiler pre-#defines
    that need to have a value, such as __GNUC__=4:
      macro __GNUC__ 4
    macro implies and automatically does expand and define.

  remove define Identifier
    Don't preserve #defines/#undefs for that symbol


Input files
-----------

  download "URL" "outputfilename"
    For downloading tarballs

  extract "tarballfilename"
  extract "tarballfilename" "outputdirectoryname"
    For extracting tarballs

  copyfile "oldname" "newname"
    For copying files around after extracting a tarball, if needed

  file "filename.h"
    To register input files from the extracted tarballs

  dir "dirname"
    To register all *.h files found in the directory and sub-directories

Versions
--------

  version <spec>
    <version-specific code...>
  endversion

    Used to tell fbfrog about multiple versions of a binding. fbfrog will
    parse input files registered for each version, do preprocessing with
    the symbols registered for each version, and combine the resulting
    declarations into a single binding.
    This can be used to handle different versions of a library, and also
    Win32/Linux/DOS versions of the same header (in case the header has
    system-specific elements).

    For example:
        version FOO                  ->    #ifdef FOO
        version FOO.BAR              ->    #if defined(FOO) and defined(BAR)
        version FOO(1)               ->    #if FOO = 1
        version FOO(2)               ->    #if FOO = 2
        version FOO("1.0")           ->    #if FOO = "1.0"
        version FOO("1.2")           ->    #if FOO = "1.2"
        version MAJOR(1).MINOR(1)    ->    #if MAJOR = 1 and MINOR = 1
        version __FB_WIN32__         ->    #ifdef __FB_WIN32__

    How to use:
        version __MYLIB_VERSION__(1)
            <define/undef/etc. for mylib version 1>
        endversion
        version *.__FB_WIN32__
            <add win32-specific statements for all versions, effectively creating win32-specific versions>
        end version
        version *.__FB_LINUX__
            <add win32-specific statements for all versions, effectively creating win32-specific versions>
        end version

The rest
--------

  option <name>
    nomerge       - create one *.bi per *.h, instead of a single *.bi
    whitespace    - try to preserve comments and empty lines
    nopp          - disable preprocessing (for test cases)
    noppfold      - disable #if expression folding (for test cases)
    noautoextern  - disable automated calling convention to Extern block
                    conversion (for test cases)
