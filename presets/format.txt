*.fbfrog file format
--------------------

  Similar to C code: // or /**/ for comments, case sensitive keywords,
  "..." string literals, etc., but EOL = statement separator.

Preprocessing (#if block evaluation, macro expansion)
-----------------------------------------------------

  define Identifier
    Register a symbol that's known to be #defined initially, so #ifdef checks
    on it can be evaluated. Useful for compiler pre-#defines such as _WIN32,
    or to get rid of uninteresting #if blocks.

  undef Identifier
    Same thing except that the symbol is known to be *not* #defined initially.
    Common case:
       undef __cplusplus

  noexpand Identifier
    Don't do macro expansion for this symbol

  macro Identifier
  macro Identifier MacroBody
  macro Identifier(MacroParameters) MacroBody
    Declare a #define macro that will be expanded if invoked in the header.
    Same syntax as a #define statement in C/FB. Useful for compiler pre-#defines
    that need to have a value, such as __GNUC__=4:
      macro __GNUC__ 4
    macro implies and automatically does expand and define.

  remove define Identifier
    Don't preserve #defines/#undefs for that symbol


Input files
-----------

  download "URL" "outputfilename"
    For downloading tarballs

  extract "tarballfilename"
  extract "tarballfilename" "outputdirectoryname"
    For extracting tarballs

  copyfile "oldname" "newname"
    For copying files around after extracting a tarball, if needed

  file "filename.h"
    To register input files from the extracted tarballs

  dir "dirname"
    To register all *.h files found in the directory and sub-directories

Versions
--------

  version NumberLiteral|StringLiteral
    <version-specific preset statements...>
  endversion

    Used to tell fbfrog about multiple versions of a binding. fbfrog will
    parse input files registered for each version, do preprocessing with
    the symbols registered for each version, and combine the resulting
    declarations into a single binding.

    This should be used to handle different versions of a library, for example:

        file "common-to-all-versions.h"
        version 1
            define ONLY_DEFINED_FOR_V1
        version 2
            file "header-preset-in-v2-only.h"
        version 3
            file "header-preset-in-v3-only.h"

    fbfrog will try to combine declarations common to all versions, and put
    other declarations (that exist in some versions only, but not all) inside
    #if checks such as <#if __MYLIB_VERSION__ = 1>, which allows the binding's
    user to select the API version by #defining __MYLIB_VERSION__ as wanted.

    Version blocks can be used to represent the original library version
    numbers, if wanted:
        version "1.0.0"
        version "1.0.1"
        version "1.1.0"
        version "1.2.0"
        version "2.0.0"
    or just API versions (which may be good enough, depending on the library):
        version 1
        version 2
    or perhaps:
        version 10
        version 11
        version 12
        version 20
    or other arbitrary strings/values:
        version "new"
        version "old"
        version "1"
        version "1-static"
        version "1-dll"

  target dos|linux|win32
    <target-specific preset statements...>
  endtarget

    Similar to version blocks, but for target system specifics.


The rest
--------

  option <name>
    nomerge       - create one *.bi per *.h, instead of a single *.bi
    whitespace    - try to preserve comments and empty lines
    nopp          - disable preprocessing (for test cases)
    noppfold      - disable #if expression folding (for test cases)
    noautoextern  - disable automated calling convention to Extern block
                    conversion (for test cases)
