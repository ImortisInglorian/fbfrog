
  fbfrog -- FreeBASIC binding generator
  Copyright (C) 2011 - 2014  Daniel C. Klauer <daniel.c.klauer[at]web.de>

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.


What's this?

  * This program reads *.h files (C API declarations) and generates a *.bi file
    (FreeBASIC API declarations)
  * Automates most of the work needed to create and maintain FB bindings
  * Has its own C pre-processor (CPP) and C parser capable of parsing most
    declarations (but not function bodies)
  * Uses an AST to represent the input API's struct/function declarations etc.
    declarations, makes that AST FB-friendly and emits it as FB code
  * Can read multiple versions of an API and merge them into a single binding


Compiling:

    $ fbc *.bas -m fbfrog


Usage:

  Generate *.bi from *.h:
    $ ./fbfrog foo.h

  Work-around fbfrog #define parsing error:
    $ ./fbfrog foo.h -removedefine FOO

  Add a pre-define to be used during the CPP step:
    $ ./fbfrog foo.h -removedefine FOO -define FOO 123


  Ideally fbfrog will accept the .h file without the need for any work-arounds,
  but usually it's necessary to use some extra options. It can be useful to put
  those options into a file, so they can easily be re-used/shared:
    file example.fbfrog:
        -define A
        -define B
        -define FOO 123
        -removedefine BAR1
        -removedefine BAR2
        -removedefine BAR3
  Finally:
    $ ./fbfrog @example.fbfrog


  fbfrog's C preprocessor & parser are incomplete and you may see errors because
  of that. Please report such issues/missing features, they're probably not too
  hard to implement. Temporary work-arounds:
    a) remove the offending constructs from the input .h files
    b) use one of the -remove* command line options

  The code generated by fbfrog may be wrong. Hopefully that won't happen a lot,
  but fbfrog uses heuristics and despite everything it's not a fully complete C
  compiler, and it doesn't even require expanding all #includes. Thus, it's a
  good idea to at least look at the binding code generated by fbfrog, and to
  make an FB code example that uses the binding and tests that it is basically
  working; i.e. it should at least compile fine under fbc.


  fbfrog is able to read in multiple APIs and merge them into a single binding.
  This is used for combining the target-specific versions of an API (DOS, Linux,
  Win32, x86, x86_64, etc.), and it can also be used to combine multiple
  versions of a library such that the user of the final binding can select the
  API versions by specifying a certain #define when compiling.

  Combining multiple versions of a library into one binding, by reading in both
  libfoo-1.0/foo.h and libfoo-2.0/foo.h as separate versions:
    -declareversions __LIBFOO_VERSION 1 2
    -select __LIBFOO_VERSION
    -case 1
        libfoo-1.0/foo.h
    -case 2
        libfoo-2.0/foo.h
    -endselect
  Save those options into a foo.fbfrog helper file, and pass it to fbfrog:
    $ ./fbfrog @foo.fbfrog
  The created binding will allow the user to #define __LIBFOO_VERSION to 1 or
  2 in order to select that specific API version.


Running the tests:

  1. $ fbc tests/run.bas
  2. $ tests/run
  3. Use Git to check the status of the tests/ directory. Any changes indicate
     test failures.


To do:

- #if expression evaluation:
  - Support unsigned values
  - Don't crash on (INT_MIN / -1) or (INT_MIN % -1)
- Should astOpsC2FB() insert clng() at various places to ensure that C int
  expressions produce 32bit values even in 64bit FB?
- simple "char" type (no signed/unsigned, no pointer, no array) should be translated
  to BYTE instead of ZSTRING
- char array should be translated to zstring * N:
    static char s[10] = "hello";
    dim shared s as zstring * 10 => "hello"
- parentheses around macro params should be preserved (can use a flag on the AST node)
- Emit list of renamed symbols at top of header
- support -o - to write to stdout, or just -stdout, or similar

- Add support for parsing function bodies: if/else blocks, for/while/do/while
  loops, local vars, assignments, goto, break, return, switch, labels including 'case'.
  - change hScopeBlockOrInitializer(): depending on context it doesn't need and
    shouldn't do this disambiguation
  - Scope block parsing should be the same as parsing function bodies
  - Identifier fixup inside scopes
  - How to handle assignments in the middle of expressions or as if/while conditions?
        if (a = 1) ...          =>    a = 1 : if a then ...
        if (a = 1 && b = 2) ... =>    a = 1 : if a then : b = 2 : if b then ... : end if
    ?: and &&/|| operands containing assignments must be expanded to real if blocks.

- Turn -nomerge into -insert <absolute-file-name-pattern>
  By default: Don't insert #includes
  Can use -insert '*' to insert all #includes that can be found,
  or -insert '*/gtk/*' to insert only certain ones, etc.
    - Seems nicest to match against the absolute path but with common prefix
      removed already. #include messages should use the stripped filename, and
      show whether the #include will be inserted or not - that will help the
      user to tell what the pattern being matched against, and whether it
      matched or not.
- If an #include was found but not inserted, then the #include statement should
  be preserved (but renamed .h -> .bi)
- #includes that can't be found should just be removed, e.g. system headers
- fbfrog should automatically add the proper crt/* #include if needed

- Performance issues:
  - speed: AST walking, especially astReplaceSubtypes()
      - Could be fixed by using a type map - then astReplaceSubtypes() would only
        need to update an entry in the type map instead of walking the whole AST
        => API-specific symbol table, backed by global read-only string table
  - speed: String comparisons (also as part of AST walking)
        => should become symbol table entry comparisons
  - memory usage: hAstLCS() matrix; also string/AST node/token buffer allocations
  - Add tk array implementation, and compare performance, on headers with lots
    of macro expansion.

- Write fbc wrapper that would allow using fbfrog as fbc pre-processor:
  Search for
    #fbfrog <fbfrog command line>
  and replace it with the generated binding code (in a temp copy of the input
  .bas file). Of course it will only recognize stuff from the fbfrog command
  line, not any FB #defines appearing above the #fbfrog statement...
